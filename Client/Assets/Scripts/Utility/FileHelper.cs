
using System.IO;
using System.Text;
using System.Collections.Generic;
using System;
using System.Security.Cryptography;
using UnityEngine;
using Random = System.Random;

public static class FileHelper
{
    public static TextReader OpenReader(string path, Encoding encoding = null)
    {
        try
        {
            var stm = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            if (encoding == null)
            {
	            encoding = Encoding.Default;
            }
            return new StreamReader(stm, encoding);
            
        }
        catch (Exception e)
        {
	        Debug.LogError("OpenTextReaderError : " + e);
        }

        return null;
    }

    public static TextWriter OpenWriter(string path, FileMode mode = FileMode.Create)
    {
        try
        {
            var stm = new FileStream(path, mode, FileAccess.Write, FileShare.Read);
            return new StreamWriter(stm);
        }
        catch (Exception e)
        {
	        Debug.LogError("OpenTextWriterError : " + e);
        }
        return null;
    }

    public static byte[] ReadAllBytes(string path)
    {
	    using var stream = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
	    
	    var length = stream.Length;
	    if (length > 0x7fffffffL)
	    {
		    throw new IOException("Reading more than 2GB with this call is not supported");
	    }
	    var offset = 0;
	    var count = (int)length;
	    var array = new byte[length];
	    while (count > 0)
	    {
		    var num4 = stream.Read(array, offset, count);
		    if (num4 == 0)
		    {
			    throw new IOException("Unexpected end of stream");
		    }
		    offset += num4;
		    count -= num4;
	    }
	    return array;
    }

    public static List<string> GetFileList(string directory, string extension)
    {
        var _list = new List<string>();
        if (!Directory.Exists(directory))
        {
	        return _list;
        }

        GetFileListImpl(_list, directory, extension);
        return _list;
    }

    private static void GetFileListImpl(List<string> _list, string path, string extension)
    {
        var fileList = Directory.GetFiles(path, "*" + extension);
        for (var i = 0; i < fileList.Length; ++i)
        {
	        _list.Add(fileList[i]);
        }

        var dirtList = Directory.GetDirectories(path);
        for (var i = 0; i < dirtList.Length; ++i)
        {
	        GetFileListImpl(_list, dirtList[i], extension);
        }
    }

    public static byte[] GetBytesFromFile(string fileName)
    {
	    try
	    {
		    var stream = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.Write);
		    var buffer = new byte[stream.Length];
		    stream.Read(buffer, 0, (int)stream.Length);
		    stream.Close();
		    return buffer;
	    }
	    catch (Exception e)
	    {
		    Debug.LogError("GetBytesFromFile Error:" + e);
	    }

	    return null;
    }

    public static string GetTableFromFile(string fileName)
    {
	    var bytes = GetBytesFromFile(fileName);
	    if (bytes != null)
	    {
		    return DecodeTable(bytes);
	    }
        return "";
    }

    public static string DecodeUTF8(byte[] source)
    {
	    var text = Encoding.UTF8.GetString(source);
	    return text;
    }
    
    //解码文本文件
    public static string DecodeTable(byte[] source) 
    {
	    //尝试解密
	    var buffer = CopyTo(source);   
	    
	    var encode = Encoding.GetEncoding("GBK");
	    if (buffer.Length >= 3 && buffer[0] == 0xEF && buffer[1] == 0xBB && buffer[2] == 0xBF)
	    {
		    encode = Encoding.UTF8;
	    }
	    else if (buffer.Length >= 2 && buffer[0] == 0xFF && buffer[1] == 0xFE)
	    {
		    encode = Encoding.Unicode;
	    }

	    var text = "";
	    try
	    {
		    var result = Encoding.Convert(encode, Encoding.UTF8, buffer);
		    if (result.Length >= 3 && result[0] == 0xEF && result[1] == 0xBB && result[2] == 0xBF)
		    {
			    text = Encoding.UTF8.GetString(result, 3, result.Length - 3);
		    }
		    else
		    {

			    text = Encoding.UTF8.GetString(result);
		    }
	    }
	    catch (Exception e)
	    {
		    Debug.LogError(e);
	    }

	    return text;
    }
    
    //加密常熟
    private static byte[] _ =
    {
		0x68, 0xA9, 0x90, 0x02, 0x29, 0xA8, 0xE6, 0x23, 0xB4, 0xD2, 0x44, 0x99, 0x8A, 0xAA, 0xA5, 0x21, 
		0x3F, 0xE9, 0xA5, 0x42, 0xB2, 0xF1, 0x18, 0x8D, 0x44, 0x7C, 0x82, 0xA8, 0x13, 0x68, 0xC8, 0xCF, 
		0x4E, 0xC5, 0x70, 0x22, 0x11, 0x74, 0xB9, 0x12, 0x44, 0x10, 0xFC, 0x08, 0x28, 0x21, 0x06, 0xC0, 
		0x23, 0x48, 0x14, 0x3F, 0x80, 0x00, 0xE0, 0xC9, 0x80, 0x2F, 0x02, 0x8B, 0x01, 0x70, 0x68, 0x0C, 
		0x0E, 0x0D, 0xE0, 0x50, 0x00, 0x96, 0x8A, 0xA1, 0x50, 0x01, 0x02, 0xE2, 0xCB, 0x83, 0x84, 0xAC, 
		0x29, 0x45, 0x71, 0x54, 0x2E, 0x83, 0xF5, 0xC5, 0x16, 0xB4, 0xA3, 0x21, 0xC5, 0x6A, 0xB5, 0x82, 
		0x8A, 0x46, 0x6B, 0x34, 0x1A, 0x3F, 0x0D, 0xCE, 0x4F, 0xAE, 0xDC, 0x82, 0x06, 0x28, 0x14, 0x0A, 
		0x1A, 0x83, 0x45, 0x63, 0xB1, 0x28, 0x08, 0x81, 0x52, 0x25, 0xC9, 0xD4, 0x7C, 0x2D, 0x4A, 0xA6, 
		0x72, 0x9F, 0xD1, 0xC0, 0x00, 0x55, 0x42, 0xA5, 0x44, 0xA1, 0x96, 0xC8, 0x65, 0x08, 0xA3, 0x46, 
		0xBE, 0x40, 0xBE, 0x4D, 0x4D, 0x43, 0x42, 0x9E, 0x7E, 0x0E, 0x41, 0xAA, 0xE0, 0x70, 0xBE, 0x2A, 
		0x96, 0xA9, 0xBE, 0x24, 0x0A, 0x4A, 0x19, 0x5A, 0xCB, 0x57, 0xA0, 0x01, 0x3F, 0x0C, 0x5A, 0x2A, 
		0x35, 0xC6, 0xF5, 0x09, 0xAD, 0x52, 0x73, 0xC1, 0xFF, 0xBA, 0xF1, 0x4D, 0xB4, 0x8A, 0x97, 0xA4, 
		0x00, 0xD1, 0x5C, 0x50, 0x25, 0xDF, 0xA6, 0x14, 0x42, 0xF5, 0x88, 0x73, 0x9F, 0x21, 0x43, 0xB9, 
		0xFB, 0x6B, 0x43, 0x46, 0x20, 0xE4, 0x0D, 0x35, 0x42, 0x29, 0x81, 0x8A, 0xC2, 0x4F, 0x64, 0xC8, 
		0x85, 0xDB, 0xA4, 0xA0, 0x4C, 0xCD, 0x66, 0xD0, 0x90, 0xD0, 0x8D, 0x9F, 0x48, 0x22, 0xA2, 0x92, 
		0x89, 0x14, 0x06, 0x40, 0x24, 0x63, 0x70, 0x04, 0x3C, 0xC0, 0xC4, 0x01, 0x40, 0x08, 0x1D, 0xCB, 
		0x64, 0x06, 0xE3, 0x19, 0x04, 0x56, 0x08, 0x01, 0x4B, 0x21, 0xB1, 0x66, 0x74, 0x7C, 0x8B, 0x8B, 
		0x61, 0x11, 0x28, 0x4C, 0x3A, 0x8B, 0x40, 0x64, 0x05, 0x13, 0x01, 0x88, 0x1D, 0x42, 0x22, 0x63, 
		0x98, 0x64, 0x0A, 0x81, 0x41, 0x22, 0x02, 0x38, 0x32, 0x9D, 0x38, 0xC3, 0x65, 0xCB, 0x54, 0x6A, 
		0xBE, 0x4C, 0x08, 0xCE, 0xD8, 0x95, 0x40, 0x76, 0xBF, 0x70, 0xF1, 0x7F, 0xC9, 0xA5, 0xD2, 0x95, 
		0x20, 0x5F, 0x2D, 0x57, 0xF2, 0xE4, 0xF2, 0xC4, 0x99, 0x0E, 0x88, 0x14, 0xCB, 0xD5, 0x72, 0x95, 
		0x58, 0xAE, 0x40, 0xD0, 0xE9, 0x88, 0xA5, 0x1C, 0xBE, 0x50, 0x22, 0x33, 0xEE, 0xBF, 0x37, 0xD6, 
		0xE7, 0x73, 0xB8, 0x0C, 0x50, 0x29, 0xD9, 0x0E, 0x8A, 0x58, 0x4A, 0xB9, 0x14, 0xF1, 0x29, 0xC1, 
		0x54, 0xC9, 0x37, 0x1C, 0xC0, 0xC5, 0xE1, 0xC9, 0x14, 0x1C, 0x3E, 0x0E, 0x45, 0xC6, 0x88, 0xF0, 
		0x28, 0x3C, 0x11, 0x14, 0xA0, 0xF8, 0x18, 0x40, 0x80, 0x22, 0x60, 0x71, 0xA2, 0x38, 0x28, 0x1B, 
		0x18, 0x3E, 0x0E, 0x0A, 0xE0, 0x33, 0x5F, 0xF4, 0xFF, 0x24, 0x0E, 0x0D, 0x39, 0x84, 0x36, 0x76, 
		0xC8, 0xFF, 0x74, 0xCC, 0xCC, 0x11, 0xD4, 0x86, 0x46, 0xF1, 0x6B, 0xFF, 0x43, 0x9B, 0xAF, 0x13, 
		0x04, 0xCA, 0xA0, 0xB1, 0x51, 0x42, 0xF3, 0x51, 0x10, 0xE0, 0x0F, 0x87, 0xC1, 0xE6, 0x78, 0xB1, 
		0x19, 0xC1, 0x3C, 0xED, 0xC0, 0x8B, 0xC2, 0xB5, 0x89, 0xF6, 0xDB, 0x5C, 0x3A, 0x5A, 0x54, 0x63, 
		0x5D, 0x2F, 0x5E, 0xF4, 0x26, 0xA4, 0x54, 0x2C, 0x22, 0x64, 0xD4, 0x2A, 0x1D, 0x4A, 0xCB, 0x6C, 
		0x67, 0xC1, 0x17, 0xB0, 0xF7, 0xB6, 0x8F, 0x30, 0x97, 0xB4, 0x3A, 0xD8, 0xED, 0x1A, 0xCE, 0x61, 
		0xBB, 0x69, 0x79, 0x1B, 0x31, 0x97, 0xBD, 0xED, 0x12, 0xCB, 0x2E, 0xB7, 0xFF, 0xC4, 0x75, 0xB5, 
		0x72, 0xED, 0x2D, 0x74, 0xE0, 0x34, 0xF5, 0x98, 0xAD, 0xB0, 0xB5, 0x97, 0xCC, 0x91, 0x58, 0xA0, 
		0xEC, 0x2D, 0xA5, 0x9A, 0x2D, 0x9A, 0xB1, 0xB5, 0xA9, 0x38, 0x69, 0x69, 0x47, 0x3E, 0xAF, 0x04, 
		0xE4, 0xBC, 0x5B, 0x31, 0xE5, 0xEF, 0x3F, 0x5D, 0x1F, 0x38, 0xB9, 0x61, 0xFA, 0xDE, 0xF8, 0x75, 
		0xD1, 0x99, 0xB5, 0xBF, 0x9D, 0xC1, 0xE4, 0xE8, 0x72, 0x74, 0x93, 0x16, 0xDA, 0x27, 0xFB, 0xFB, 
		0x7F, 0x7E, 0x7D, 0xBF, 0xA2, 0xB6, 0xC8, 0xA6, 0x51, 0x1C, 0x10, 0x52, 0x5E, 0x64, 0xA6, 0x71, 
		0xBE, 0xF7, 0x0B, 0xAB, 0x3C, 0xE7, 0x72, 0x16, 0x9E, 0x6A, 0x51, 0xF6, 0xCC, 0x6A, 0xF7, 0xE3, 
		0xF1, 0xBD, 0x5D, 0xD6, 0x07, 0x2E, 0xAC, 0x99, 0xDC, 0xEC, 0xD2, 0xD1, 0x3C, 0x7F, 0xFE, 0x9C, 
		0xB9, 0x2E, 0xDF, 0xE5, 0x83, 0xF2, 0x15, 0xCB, 0xA6, 0x48, 0x8B, 0x6F, 0xA6, 0x83, 0x83, 0x78, 
		0x97, 0xD4, 0x78, 0xF7, 0xE0, 0x9D, 0xFF, 0x39, 0x66, 0x62, 0x3E, 0xE6, 0xF8, 0xEE, 0xFD, 0x29, 
		0x64, 0xC6, 0x70, 0x5B, 0x77, 0xD6, 0x5B, 0x9D, 0xE3, 0x1D, 0xD8, 0xAA, 0x44, 0xEF, 0x7F, 0xA5, 
		0xE7, 0xF9, 0x2E, 0xAC, 0xA2, 0x6B, 0xD7, 0x5C, 0x98, 0x15, 0xB4, 0xC9, 0xA7, 0xB2, 0x0D, 0x8C, 
		0xD2, 0x2F, 0xF9, 0x7D, 0xA8, 0xE9, 0xDD, 0xA1, 0x91, 0x86, 0xD0, 0xE7, 0x5E, 0x01, 0xD7, 0xFB, 
		0x9E, 0xF6, 0x97, 0x94, 0x62, 0xAD, 0xEC, 0xC4, 0x3F, 0xB5, 0x74, 0xAA, 0x4E, 0x28, 0x43, 0x0F, 
		0x6B, 0xEA, 0x60, 0x69, 0x43, 0x5E, 0x55, 0x3E, 0xCD, 0x0B, 0xC1, 0xD3, 0x2D, 0xE1, 0x8A, 0x5D, 
		0xCE, 0xE2, 0x8A, 0xDB, 0x87, 0x9D, 0x3C, 0x46, 0x3D, 0x9F, 0x54, 0xB5, 0x16, 0x3A, 0x99, 0xDD, 
		0x69, 0x1C, 0x7E, 0x90, 0x14, 0x78, 0xD8, 0xE6, 0xE6, 0x9B, 0xBB, 0x45, 0x9C, 0xF4, 0x88, 0xEC, 
		0x80, 0xD4, 0xE8, 0xE1, 0xB9, 0x16, 0xB1, 0xAC, 0xAC, 0x82, 0xEE, 0xB1, 0x3B, 0x1F, 0x23, 0x27, 
		0xA7, 0x6E, 0xC3, 0x48, 0xBF, 0x5B, 0x6E, 0x1E, 0x70, 0x54, 0x1C, 0xCD, 0xB2, 0x6F, 0xD5, 0x47, 
		0x69, 0xE0, 0xEB, 0x8B, 0x83, 0x48, 0xEB, 0x9A, 0x97, 0xC6, 0x88, 0x47, 0x27, 0x8F, 0x56, 0x81, 
		0x56, 0x6E, 0x32, 0x12, 0x53, 0x35, 0xD8, 0x1E, 0x90, 0x13, 0x00, 0x0F, 0xF2, 0xE6, 0xDA, 0x9F, 
		0x87, 0x0F, 0x35, 0xE6, 0x3D, 0x7E, 0x6D, 0xD6, 0x13, 0x31, 0xE4, 0x71, 0xA4, 0x0F, 0x12, 0x6C, 
		0xE7, 0x9E, 0xCE, 0x3E, 0xD8, 0xA1, 0xAB, 0x7F, 0x38, 0x6D, 0x19, 0x83, 0xD8, 0x7A, 0x4B, 0x19, 
		0xE1, 0xB0, 0xC0, 0xE7, 0x58, 0x90, 0xEE, 0xE0, 0x3F, 0x17, 0x2F, 0x6C, 0xA6, 0xDE, 0x68, 0xA9, 
		0xAE, 0xE7, 0x9E, 0xC8, 0x86, 0x6F, 0x5E, 0x2F, 0x80, 0x1F, 0x94, 0x0D, 0x71, 0x3D, 0x54, 0x9A, 
		0x0D, 0xE9, 0x51, 0xC5, 0x45, 0x57, 0x82, 0xE2, 0x0D, 0x7B, 0x7C, 0xE7, 0xE5, 0xF8, 0x06, 0x3E, 
		0x67, 0x8F, 0x74, 0xF5, 0x14, 0xDE, 0xCB, 0xD4, 0x9A, 0xED, 0x47, 0xAD, 0xB2, 0xB5, 0x44, 0xD5, 
		0x44, 0x87, 0x9F, 0xDF, 0x14, 0x8B, 0x3B, 0xDC, 0xF2, 0x60, 0x4F, 0x4C, 0xA0, 0xA0, 0x2E, 0xDC, 
		0xF1, 0x90, 0x46, 0x52, 0x6A, 0x95, 0x9F, 0x3B, 0x91, 0x51, 0x91, 0x1E, 0x91, 0x8C, 0x77, 0xB8, 
		0x76, 0x71, 0xCD, 0x30, 0x6E, 0x4F, 0xC6, 0x23, 0x52, 0x60, 0x81, 0x46, 0x96, 0x34, 0x1C, 0x4A, 
		0xAF, 0x6E, 0x48, 0xDA, 0xB1, 0x4D, 0x7B, 0xE5, 0xDC, 0x6B, 0x77, 0x62, 0x6E, 0x55, 0xD6, 0x40, 
		0x9D, 0xEE, 0x78, 0x43, 0xCE, 0x48, 0x41, 0xF8, 0xAD, 0xBB, 0x47, 0x4C, 0x56, 0xAE, 0x7E, 0x18, 
		0x72, 0xEE, 0x3E, 0x31, 0xAC, 0x7F, 0x34, 0xCF, 0xF2, 0xD7, 0xE7, 0x4E, 0x35, 0xC9, 0x1F, 0x13, 
		0x32, 0x6C, 0xCC, 0x97, 0x3B, 0x6D, 0x6F, 0xAA, 0x19, 0xE4, 0x21, 0xBB, 0xB5, 0x9D, 0xB9, 0x6F, 
		0xF7, 0x96, 0xDD, 0x20, 0x9D, 0x63, 0x0F, 0x04, 0x00, 0xE2, 0x6B, 0x2D, 0xD9, 0xE6, 0x06, 0xC1, 
		0x74, 0xDE, 0xDE, 0xF7, 0xB1, 0x45, 0x61, 0xEB, 0x3C, 0x76, 0xA9, 0xF2, 0x32, 0x97, 0x2D, 0xEC, 
		0x5A, 0x82, 0xE0, 0xE9, 0x37, 0x38, 0xB8, 0xFD, 0x28, 0x91, 0xBE, 0xE9, 0x43, 0xD7, 0x18, 0x7E, 
		0xD4, 0x3B, 0xCE, 0x73, 0x62, 0x1F, 0x19, 0xCC, 0x7A, 0x9F, 0xBB, 0xFD, 0x40, 0xA6, 0x68, 0x57, 
		0x6B, 0x3D, 0x3F, 0x65, 0x0A, 0x76, 0x93, 0x77, 0x69, 0x0D, 0x46, 0x15, 0x3A, 0xC0, 0xBE, 0x73, 
		0xF1, 0x40, 0x5C, 0x99, 0xC1, 0xC3, 0x74, 0xB0, 0x5B, 0xA0, 0x33, 0xED, 0x68, 0x4C, 0xBF, 0x61, 
		0xD5, 0x29, 0xBE, 0x86, 0x7F, 0xDD, 0x37, 0x79, 0x7F, 0x53, 0xF5, 0x72, 0x75, 0x95, 0xEF, 0xDD, 
		0xDF, 0x3E, 0x64, 0xA5, 0x52, 0x72, 0xDC, 0x1A, 0xBF, 0x4B, 0x8B, 0xCA, 0x35, 0x8C, 0x7C, 0x1C, 
		0x4F, 0x39, 0xF9, 0x78, 0xB3, 0x77, 0xF3, 0x13, 0xD7, 0xD6, 0xF1, 0xE9, 0x18, 0xAD, 0x01, 0x48, 
		0x7B, 0x17, 0x02, 0x7F, 0x58, 0x71, 0xE9, 0xA4, 0xE2, 0xF9, 0xA3, 0x89, 0x34, 0xBF, 0xEB, 0x6F, 
		0xA6, 0x8F, 0x5E, 0xA9, 0x6E, 0x4D, 0xDF, 0xB0, 0xC8, 0x3F, 0xDF, 0xB3, 0xBF, 0xB2, 0xD8, 0x39, 
		0xAC, 0x76, 0x60, 0xDF, 0xA2, 0x1D, 0xE3, 0xC5, 0x79, 0x20, 0xBD, 0x76, 0x37, 0xFF, 0x4E, 0x69, 
		0x53, 0x5F, 0x4E, 0x7B, 0xEF, 0xC6, 0xDD, 0xB9, 0x21, 0x8F, 0x89, 0x3C, 0x82, 0x69, 0x1E, 0xF5, 
		0x54, 0x54, 0x65, 0x69, 0xC9, 0x83, 0xE6, 0x16, 0x5F, 0xFC, 0x1A, 0x3F, 0x3D, 0xEB, 0x7A, 0xEE, 
		0xA1, 0xD4, 0xC6, 0x8C, 0x12, 0x8A, 0xC6, 0x33, 0x43, 0x70, 0x68, 0xF4, 0xD9, 0x0B, 0xE7, 0xD1, 
		0x14, 0x41, 0x7D, 0x91, 0x7F, 0x77, 0x64, 0xC9, 0x5B, 0xCF, 0x78, 0x7D, 0xBB, 0xEA, 0xE2, 0x40, 
		0xD1, 0x83, 0xED, 0xCC, 0xBD, 0x89, 0x78, 0x8E, 0x5D, 0x72, 0xBC, 0xFD, 0x4E, 0x3B, 0xF7, 0xEA, 
		0xDE, 0x12, 0x3D, 0xD0, 0xF7, 0x7D, 0x4D, 0x8D, 0x4F, 0x7B, 0xB9, 0xB5, 0xB9, 0x0B, 0xF9, 0x15, 
		0x6A, 0x22, 0xB0, 0xD1, 0x55, 0xBA, 0x69, 0x7B, 0x59, 0x75, 0xB3, 0x8D, 0xBF, 0xAB, 0xAC, 0xBD, 
		0x77, 0xE7, 0xAC, 0x02, 0xC2, 0x96, 0x6B, 0x0A, 0x5A, 0x3A, 0x9B, 0xBC, 0x2F, 0xFD, 0xD5, 0xEE, 
		0xB7, 0xAF, 0x4E, 0xE5, 0x54, 0xCF, 0x73, 0x95, 0xFB, 0x1C, 0xBB, 0xBD, 0xC8, 0x6E, 0xE8, 0xE7, 
		0xAC, 0xD8, 0xB1, 0xE3, 0xFB, 0xB7, 0x5A, 0x51, 0x3B, 0xBB, 0xAE, 0x5A, 0xB5, 0xE9, 0x0C, 0x9E, 
		0xAD, 0x2F, 0x4D, 0x19, 0x6B, 0x1D, 0xFB, 0xF2, 0xF5, 0x26, 0x1D, 0x2F, 0x4D, 0xEA, 0x02, 0xFB, 
		0xE7, 0x0D, 0xF6, 0x2F, 0xD9, 0x8D, 0x74, 0x3A, 0x7E, 0xF5, 0xE4, 0x8E, 0xB6, 0x3D, 0x17, 0x3E, 
		0x34, 0xB3, 0xE4, 0x5E, 0x8E, 0x57, 0x5B, 0x9F, 0xEE, 0x5A, 0x55, 0xC1, 0x71, 0xE6, 0x54, 0xDE, 
		0x9F, 0x18, 0xF9, 0x58, 0x2D, 0x85, 0xC7, 0xFF, 0xFB, 0xD7, 0x1B, 0xED, 0x4A, 0xD2, 0x98, 0x7F, 
		0xD0, 0xE8, 0x91, 0x29, 0x1B, 0x36, 0xFC, 0x96, 0x1B, 0xB6, 0xF6, 0xFC, 0xE5, 0xB3, 0xBE, 0x69, 
		0x7F, 0x10, 0x3A, 0xF7, 0xD1, 0xB1, 0xBC, 0x8F, 0x0D, 0xC2, 0x95, 0xE1, 0xAA, 0x7C, 0xA2, 0x69, 
		0x74, 0xC4, 0xC5, 0xCA, 0x7F, 0x90, 0x9D, 0xF6, 0x97, 0x1B, 0x6A, 0x33, 0xE7, 0x93, 0xD3, 0x0B, 
		0x7D, 0x97, 0xC3, 0x93, 0x1A, 0xB2, 0xCC, 0x3F, 0x74, 0xBD, 0x72, 0x46, 0xB6, 0x5D, 0x3E, 0x77, 
		0x36, 0xE3, 0xB8, 0x64, 0x96, 0x69, 0x47, 0x59, 0x29, 0xA3, 0xD4, 0xF7, 0x02, 0xED, 0xED, 0xE3, 
		0x93, 0x83, 0x4F, 0xDF, 0x77, 0x35, 0x3C, 0x5B, 0xAA, 0xF4, 0x7A, 0xE6, 0x22, 0xB0, 0x5D, 0xAF, 
		0x92, 0x14, 0xA6, 0x7A, 0x7B, 0x62, 0x52, 0x66, 0x37, 0xCF, 0xCD, 0x2C, 0x6D, 0xEB, 0xAA, 0x68, 
		0xCD, 0x9D, 0xD0, 0x06, 0xCF, 0x6E, 0x3B, 0xDD, 0xDA, 0xF1, 0x30, 0x06, 0x6E, 0x8B, 0xF6, 0x5A, 
		0x8E, 0xEB, 0x19, 0x7B, 0xDA, 0x82, 0xD6, 0x59, 0x76, 0x0E, 0xCF, 0x0E, 0x9B, 0x38, 0x83, 0x27, 
		0x65, 0xEC, 0xD1, 0x5D, 0x29, 0x54, 0x87, 0x2E, 0xBC, 0x75, 0xBE, 0xF1, 0x87, 0x33, 0x53, 0x81, 
		0xD6, 0x78, 0x14, 0xA7, 0xA5, 0xB7, 0xD8, 0x70, 0x09, 0x27, 0xC2, 0x8C, 0x36, 0x35, 0x60, 0xE1, 
		0xF1, 0x8B, 0x81, 0x5F, 0x76, 0x64, 0xA2, 0x5E, 0x60, 0x86, 0x42, 0xB3, 0x65, 0xF5, 0x3D, 0xD6, 
		0x16, 0x66, 0xA6, 0x56, 0xE1, 0xB4, 0x53, 0xD1, 0xEE, 0x3D, 0x61, 0xE5, 0x7F, 0x0F, 0xEE, 0xC7, 
		0x8D, 0xA4, 0x60, 0x6E, 0x16, 0x70, 0x83, 0xF6, 0x4F, 0x36, 0x87, 0x4F, 0x06, 0xC1, 0x1F, 0x45, 
		0xB4, 0x7B, 0x4E, 0x75, 0xE7, 0x45, 0x77, 0xD9, 0x04, 0x0F, 0xF3, 0xD7, 0x12, 0xC3, 0xAF, 0x32, 
		0x0C, 0x9C, 0x7D, 0x94, 0x05, 0x29, 0x7F, 0x20, 0x53, 0xFD, 0xCB, 0xCE, 0x49, 0x13, 0xA4, 0xCB, 
		0x08, 0x6F, 0x16, 0x30, 0xB8, 0x0F, 0xE3, 0x2A, 0xEB, 0x64, 0x29, 0x3E, 0x93, 0xB1, 0xED, 0x2F, 
		0x11, 0x8D, 0xB7, 0x6B, 0xC4, 0xE4, 0x8D, 0x19, 0xCF, 0x41, 0xEF, 0x13, 0x7A, 0x2B, 0x72, 0x26, 
		0xFB, 0xB5, 0x4B, 0xB9, 0x9E, 0xB2, 0x7A, 0x95, 0x9E, 0xC6, 0x92, 0xA9, 0x32, 0x63, 0xAF, 0xE8, 
		0xCD, 0x0B, 0xC2, 0xAA, 0xCE, 0x5E, 0xB2, 0xEE, 0x62, 0x5E, 0x68, 0x32, 0xFB, 0x10, 0xAD, 0x33, 
		0x81, 0xC5, 0x8C, 0x45, 0x32, 0x52, 0xD7, 0xD9, 0xCE, 0x33, 0xFE, 0x8E, 0xB0, 0x99, 0x2B, 0x19, 
		0x86, 0x90, 0xCD, 0x69, 0x7F, 0x02, 0x50, 0x4B, 0x07, 0x08, 0xA0, 0x1F, 0xB4, 0x75, 0xEB, 0x07, 
		0x00, 0x00, 0xFB, 0x08, 0x00, 0x00, 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x08, 0x00, 0x08, 0x00, 
		0x36, 0x11, 0x28, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x14, 0x00, 0x00, 0x00, 0x61, 0x69, 0x6F, 0x5F, 0x75, 0x73, 0x65, 0x72, 0x5F, 0x70, 0x69, 0x63, 
		0x5F, 0x6E, 0x6F, 0x72, 0x2E, 0x70, 0x6E, 0x67, 0xEB, 0x0C, 0xF0, 0x73, 0xE7, 0xE5, 0x92, 0xE2, 
		0x62, 0x60, 0x60, 0xE0, 0xF5, 0xF4, 0x70, 0x09, 0x02, 0xD2, 0x1A, 0x20, 0xCC, 0xC1, 0x06, 0x24, 
		0x7B, 0xFE, 0xED, 0xC8, 0x05, 0x52, 0x92, 0x25, 0xAE, 0x11, 0x25, 0xC1, 0xF9, 0x69, 0x25, 0xE5, 
		0x89, 0x45, 0xA9, 0x0C, 0x8E, 0x29, 0xF9, 0x49, 0xA9, 0x0A, 0x9E, 0xB9, 0x89, 0xE9, 0xA9, 0x41, 
		0xA9, 0x89, 0x29, 0x95, 0x85, 0x27, 0x53, 0x6D, 0x18, 0x18, 0x98, 0xB3, 0x33, 0x43, 0x22, 0x4A, 
		0x22, 0x7C, 0x7D, 0xAC, 0x92, 0xF3, 0x73, 0xF5, 0x12, 0x41, 0x6A, 0xF4, 0x2A, 0x72, 0x0B, 0x80, 
		0xBA, 0x19, 0x18, 0x6C, 0xEC, 0x2B, 0x0A, 0x12, 0x93, 0xB3, 0x53, 0x4B, 0x14, 0x92, 0x52, 0xD3, 
		0x33, 0xF3, 0x6C, 0x95, 0xDE, 0xEF, 0xDE, 0xAF, 0xA4, 0x90, 0x99, 0x62, 0xAB, 0x14, 0x6E, 0xEA, 
		0x6B, 0xE0, 0x5B, 0xE0, 0x9C, 0x9A, 0x91, 0xE9, 0x51, 0x55, 0x94, 0x1A, 0x5C, 0xE5, 0x17, 0x92, 
		0x5C, 0x95, 0x9D, 0x6C, 0x99, 0xA2, 0x64, 0x6F, 0xA7, 0x60, 0x53, 0x61, 0x05, 0x34, 0x20, 0x37, 
		0xB5, 0x24, 0x51, 0xA1, 0x22, 0x37, 0x27, 0xAF, 0xD8, 0xAA, 0xC2, 0x56, 0x09, 0x6C, 0xAE, 0x15, 
		0x90, 0x0D, 0x12, 0xD6, 0x57, 0x52, 0x00, 0x2B, 0x29, 0xC9, 0xB6, 0x55, 0x82, 0x38, 0x2A, 0xC2, 
		0x37, 0x40, 0xC1, 0x39, 0xBF, 0x28, 0x55, 0xC1, 0x54, 0xCF, 0x54, 0x37, 0xD9, 0xC0, 0xD0, 0x44, 
		0xC1, 0xDC, 0x52, 0xCF, 0xD0, 0xD4, 0xD0, 0xC4, 0xC2, 0x50, 0x47, 0xC1, 0xC8, 0xC0, 0xD0, 0x58, 
		0xDF, 0xC0, 0x58, 0xDF, 0xD0, 0x58, 0xD7, 0xD0, 0xC8, 0xCA, 0xC0, 0xD2, 0xCA, 0xD0, 0x54, 0x01, 
		0x0A, 0x94, 0x80, 0xB6, 0x15, 0xA5, 0xA4, 0x59, 0x05, 0xB9, 0xB8, 0x41, 0xED, 0x02, 0xF2, 0x6C, 
		0x95, 0x32, 0x4A, 0x4A, 0x0A, 0xAC, 0xF4, 0xF5, 0xCB, 0xCB, 0xCB, 0xF5, 0xCA, 0x8D, 0xF5, 0xF2, 
		0x8B, 0xD2, 0xF5, 0x0D, 0x2D, 0x2D, 0x2D, 0xF5, 0x0D, 0x8C, 0xF4, 0x8D, 0x8C, 0x74, 0x81, 0x2A, 
		0x74, 0x8B, 0x2B, 0xF3, 0x4A, 0x12, 0x2B, 0x74, 0xF3, 0x8A, 0x95, 0x61, 0x26, 0xB8, 0xA4, 0x16, 
		0x27, 0x17, 0x65, 0x16, 0x94, 0x64, 0xE6, 0xE7, 0x29, 0x80, 0x4C, 0x4C, 0x4C, 0xCA, 0x2F, 0x2D, 
		0xB1, 0x55, 0x02, 0xBA, 0x14, 0xE2, 0x85, 0xDC, 0x02, 0x5F, 0x5F, 0xB8, 0xC1, 0x79, 0xC5, 0xD0
    }; 
    
    //加密(函数名这么起是为了怕被破解)   ver:3=加密 4=加密+校验 5=加密+随机+校验
    public static byte[] CopyFrom(byte[] buffer, byte ver)
    {
	    if (buffer.Length > 2 && buffer[0] == 'P' && buffer[1] == 'K')
        {
            return buffer;
        }

	    var _blen = buffer.Length;
	    var h = 3;
	    byte rnd = 0;
	    if (ver == 4)
	    {
		    h = 3 + 4;      //头+校验位
	    }

	    if (ver == 5)
	    {
		    h = 3 + 4 + 1;  //头+校验位+随机种子
		    rnd = (byte)(new Random()).Next(0, 256);
	    }
	    
	    var ret = new byte[_blen + h];
	    ret[0] = (byte)'P';
	    ret[1] = (byte)'K';
	    ret[2] = ver;
	    
	    var _len = _.Length;
	    uint m = 0x11223344;
	    for (var i = 0; i < _blen; i++)
	    {
		    var n = buffer[i];
		    n ^= _[(i + _blen) % _len];
		    n ^= rnd;
		    ret[i + h] = n;
		    m = (m >> 24) + (m << 8);
		    m = n ^ m;
	    }
	    
	    if(ver == 4 || ver == 5)
	    {
		    ret[3] = (byte)m;
		    ret[4] = (byte)(m>>8);
		    ret[5] = (byte)(m>>16);
		    ret[6] = (byte)(m>>24);
	    }
	    
	    if(ver == 5)
	    {
		    ret[7] = rnd;
	    }
	    return ret;
    }
    
    //尝试解密(函数名这么起是为了怕被破解)
    public static byte[] CopyTo(byte[] buffer)
    {
	    if (buffer.Length < 3)
	    {
		    return buffer;
	    }

        if (buffer[0] == 'P' && buffer[1] == 'K')
        {
            var ver = buffer[2];
            var h = 3;
            byte rnd = 0;
            if (ver == 4)
            {
	            h = 3 + 4;      //头+校验位
            }

            if (ver == 5)
            {
	            h = 3 + 4 + 1;  //头+校验位+随机种子
            }

            if(buffer.Length < h)
            {
	            return new byte[] { };
            }

            if (ver == 5)
            {
	            rnd = buffer[7];
            }

            var _blen = buffer.Length - h;
            var ret = new byte[buffer.Length - h];
            var _len = _.Length;
            if (ver > 3)
            {
                uint m = 0x11223344;
                for (var i = h; i < buffer.Length; i++)
                {
                    var n = buffer[i];
                    m = (m >> 24) + (m << 8);
                    m = n ^ m;
                }
                if (!(buffer[3] == (byte)m &&
                    buffer[4] == (byte)(m >> 8) &&
                    buffer[5] == (byte)(m >> 16) &&
                    buffer[6] == (byte)(m >> 24)))
                {
	                return new byte[] { };
                }
            }
            for (var i = h; i < buffer.Length; i++)
            {
                var n = buffer[i];
                n ^= rnd;
                n ^= _[(i - h + _blen) % _len];
                ret[i - h] = n;
            }
            return ret;
        }

        return buffer;
    }

    public static string ComputeHash(string str)
    {
	    using var md5 = new MD5CryptoServiceProvider();
        var hash = BitConverter.ToString(md5.ComputeHash(Encoding.UTF8.GetBytes(str)), 4, 8);
        hash = hash.Replace("-", "");
        return hash;
    }
}